package com.chiddu.malwareservice.malwareService.controller;

import java.io.*;
import java.sql.*;
import java.util.Properties;

public class DatabaseConfig {
    // JDBC driver name and database URL

    private static Properties config;
    static String JDBC_DRIVER ;
    static String DB_URL;
    static String DB_NAME;

    //  Database credentials
    static String USER;
    static final String PASS = "";

    /**
     * This method is used to load configurations stored in
     * "Configurations.properties" file. Please edit this file
     * for changing existing configuration or adding new one.
     * This files contains following configurations
     * -Database username : root
     * -Database password :
     * -Database JDBC_driver: com.mysql.cj.jdbc.Driver
     * -DatabaseURL: default(jdbc:mysql://localhost:3306/DB_NAME?serverTimezone=UTC)
     *
     * @param
     * @return
     * @throws IOException
     * @see
     */
    public static void readDatabaseConfigurations() {
        InputStream input = DatabaseConfig.class.getClassLoader().getResourceAsStream("application.properties");
        config = new Properties();
        try {
            config.load(input);
        } catch (IOException e) {
            e.printStackTrace();
        }
        USER = config.getProperty("spring.datasource.username");
        System.out.println("USER  = "+ USER);
        DB_URL = config.getProperty("spring.datasource.url");
        System.out.println("URL  = "+ DB_URL);
        JDBC_DRIVER = config.getProperty("spring.datasource.driver-class-name");
        System.out.println("DRIVER = "+JDBC_DRIVER);
        DB_NAME = config.getProperty("DB_NAME");
        System.out.println("DBNAME = "+DB_NAME);
        // PASS = config.getProperty("spring.datasource.password");
    }

    /**
     * This method is used to create table MALWAREURL_TBL in the malware database
     * This table typically has a auto increment
     * -ID
     * -URL
     * -STATUS(BAD,GOOD,WARN.. ETC)
     *
     * @param stmt
     * @return
     * @throws SQLException
     * @see
     */

    public static void createTable(Statement stmt) {
        String sql;
        System.out.println("Creating table MALWAREURL_TBL...");
        sql = "CREATE TABLE IF NOT EXISTS MALWAREURL_TBL " +
                "(id INTEGER not NULL AUTO_INCREMENT, " +
                " url VARCHAR(255) UNIQUE, " +
                " status VARCHAR(255), " +
                " PRIMARY KEY ( id ))";
        try {
            stmt.executeUpdate(sql);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        System.out.println("Table created successfully...");
    }

    /**
     * This method is used to create malware database
     * you can change the name of the database in the config/application.properties file
     * to create database name as per the choice or use existing database.
     * This method will ignore database creation if the database already exists.
     *
     * @param
     * @return
     * @throws SQLException
     * @see
     */
    public static void createDatabase() {
        System.out.println("Creating database...");
        Connection conn = null;
        Statement stmt = null;

        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/?serverTimezone=UTC", USER, PASS);
            stmt = conn.createStatement();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

        String sql = "CREATE DATABASE IF NOT EXISTS " + DB_NAME;
        try {
            stmt.executeUpdate(sql);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        System.out.println("Database " + DB_NAME + " created successfully...");
    }

    /**
     * This method is used to populate the malware database with existing malware URL's
     * that are listed in teh malware.txt file. You can add additional urls to this file
     * to be used for the lookup service. Once you add additional items to this list,
     * please restart the server so that the tables are populated.
     * #### THE TABLES ARE POPULATED ONLY DURING THE SERVER STARTUP WHEN THE CONFIGURATION
     * #### IS HAPPENING. WE CAN EXTEND THIS TO MAKE IT DO DYNAMIC UPDATES AS WELL.
     *
     * @param conn
     * @return
     * @throws IOException SQLException
     * @see
     */

    public static void populateMalwareDatabase(Connection conn) {
        BufferedReader reader;
        try {
            InputStream is = DatabaseConfig.class.getClassLoader()
                    .getResourceAsStream("malware.txt");
            reader = new BufferedReader(new InputStreamReader(is));
            String line = reader.readLine();
            while (line != null) {
                System.out.println(line);
                String tokens[] = line.split(" ");
                PreparedStatement stmt = conn.prepareStatement("INSERT INTO MALWAREURL_TBL(url, status) VALUES (?, ?)");
                stmt.setString(1, tokens[0]);
                stmt.setString(2, tokens[1]);
                try {
                    stmt.executeUpdate();
                } catch (SQLIntegrityConstraintViolationException e) {
                    System.out.println("URL already exists in the database");
                }
                line = reader.readLine();
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    /**
     * This is the main config method which is responsible for
     * 1)loading configuration paramenters from config file and
     * 2)Creating database if database doesn't exist
     * 3)Crating tables if that doesn't exist.
     * 4)Populating these tables with malware URL's from a editable text file(malware.txt)
     *
     * @param
     * @return
     * @throws SQLException
     * @see
     */

    public static void configMain() {
        Connection connection = null;
        Statement statement = null;

        readDatabaseConfigurations();

        try {
            //STEP 2: Register JDBC driver
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            createDatabase();
            System.out.println("Connecting to database...");
            connection = DriverManager.getConnection(DB_URL, USER, PASS);

            statement = connection.createStatement();
            createTable(statement);
            populateMalwareDatabase(connection);
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (statement != null)
                    statement.close();
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (connection != null)
                    connection.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }//end main
}//end DatabaseConfig

