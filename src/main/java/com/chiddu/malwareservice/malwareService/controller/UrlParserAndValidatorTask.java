package com.chiddu.malwareservice.malwareService.controller;

import com.chiddu.malwareservice.malwareService.model.MalwareUrl;
import com.chiddu.malwareservice.malwareService.service.MalwareLookupSerivce;

import java.io.UnsupportedEncodingException;
import java.net.*;
import java.util.Arrays;
import java.util.HashSet;

public class UrlParserAndValidatorTask implements Runnable{

    private String url;

    private MalwareUrl malwareUrl;
    private MalwareLookupSerivce malwareDatabase;

    public UrlParserAndValidatorTask(String url, MalwareLookupSerivce malwareUrl){
        this.url= url;
        this.malwareDatabase = malwareUrl;

    }

    public MalwareUrl getMalwareURL(){
        return malwareUrl;
    }

    /**
     * This method uses malwareLookupSerivce which then uses appropriate DAO to check
     * if the URL is part of the MALWAREDATABASE. If it has found the URL in the database
     * It will set the malwareUrl attribute which is accessed in the controller after the thread
     * has completed. If it not found , which means the URL is safe for accesss and hence it creates
     * a new getMalwareURL object with status as "GOOD" and url as given url.
     * Currently the database is populated using  malware.txt file which is
     * part of the config directory.
     *
     * @param domainHost(ex:"www.google.com")
     * @return
     * @throws
     * @see
     */
    public void malwareDatabaselookup(String domainHost){
        System.out.println("BEFORE  DATABASE LOOKUP " + domainHost);
        malwareUrl = malwareDatabase.get(domainHost);
        System.out.println("AFTER DATABASE LOOKUP " + malwareUrl.getUrl());
        if(malwareUrl ==null){
            malwareUrl = new MalwareUrl();
            malwareUrl.setUrl(url);
            malwareUrl.setStatus("GOOD");
            malwareUrl.setId(1);
        }
    }

    /**
     * This method uses Java's internal tool to check if the supplied URL
     * provided by the user can be converted to URI, if so it is valid
     * else we will respond back with bad request error
     * @param url
     * @return boolean
     * @exception URISyntaxException MalformedURLException
     * @see
     */

    public static boolean isValid(String url) {

        /* Try creating a valid URL */
        try {
            new URL(url).toURI();
            return true;
        }
        // If there was an Exception
        // while creating URL object
        catch (URISyntaxException e) {
            return false;
        } catch (MalformedURLException e) {
            return false;
        }
    }

    /**
     * This is the run method which does the following things
     * - Decode the URL sent from the client.
     * - Checks for the standard schemes which are allowed ("http, ftp https")
     * - Extracts the domain name from the url
     * - Makes a database query on the domain using malwareLookupSerivce
     *  which then uses appropriate DAO to check if the URL is part of the MALWAREDATABASE.
     *  If it has found the URL in the database it will set the malwareUrl attribute which is
     *  accessed in the controller after the thread has completed. If it not found ,
     *  which means the URL is safe for accesss and hence it creates
     *  a new getMalwareURL object with status as "GOOD" and url as given url.
     *  Currently the database is populated using  malware.txt file which is
     *  part of the config directory.
     *
     * @param
     * @return
     * @throws
     * @see
     */

    @Override
    public void run() {
        String decodedUrl ="";

        try {
            decodedUrl = URLDecoder.decode(url, "UTF-8");
            System.out.println("DECODED URL " + decodedUrl);

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String[] schemes = {"http", "ftp", "https"};
        HashSet<String> allowedScheme = new HashSet<>(Arrays.asList(schemes));
        URI uri = null;
        try {
            uri = new URI(decodedUrl);
        } catch (URISyntaxException e) {
            System.out.println("Bad URL Syntax ");
            return;
        }

        String scheme = uri.getScheme();
        System.out.println("DECODED URL SCHEME : " + scheme);
        if(!allowedScheme.contains(scheme)){
            this.malwareUrl = null;
            return;
        }
        String host = uri.getHost();
        System.out.println("DECODED URL HOST : " + host);
        if(UrlParserAndValidatorTask.isValid(decodedUrl))
            malwareDatabaselookup(host);
        else
            this.malwareUrl = null;
    }
}

