package com.chiddu.malwareservice.malwareService.controller;

import com.chiddu.malwareservice.malwareService.model.MalwareUrl;
import com.chiddu.malwareservice.malwareService.service.MalwareLookupSerivce;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.io.UnsupportedEncodingException;
import java.net.*;
import java.util.Arrays;
import java.util.HashSet;

public class URLParser implements Runnable{

    private String url;

    private MalwareUrl m;
    private MalwareLookupSerivce malwareDatabase;

    public URLParser(String url, MalwareLookupSerivce m){
        this.url= url;
        this.malwareDatabase = m;

    }

    public MalwareUrl getMalwareURL(){
        return m;
    }

    public void malwareDatabaselookup(String domainHost){
        System.out.println("BEFORE  DATABASE LOOKUP " + domainHost);
        m = malwareDatabase.get(domainHost);
        System.out.println("AFTER DATABASE LOOKUP " + m.getUrl());
        if(m==null){
            m = new MalwareUrl();
            m.setUrl(url);
            m.setStatus("GOOD");
            m.setId(1);
        }
    }

    public static boolean isValid(String url) {

        /* Try creating a valid URL */
        try {
            new URL(url).toURI();
            return true;
        }
        // If there was an Exception
        // while creating URL object
        catch (URISyntaxException e) {
            return false;
        } catch (MalformedURLException e) {
            return false;
        }
    }

    @Override
    public void run() {
        String decodedUrl ="";
        StringBuffer sb = new StringBuffer();
        sb.append(url);
        try {
            String encodedUrl = URLEncoder.encode(sb.toString(), "UTF-8");
            System.out.println("ENCODED URL " + encodedUrl);
            decodedUrl = URLDecoder.decode(encodedUrl, "UTF-8");
            System.out.println("DECODED URL " + decodedUrl);

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String[] schemes = {"http", "ftp", "https"};
        HashSet<String> allowedScheme = new HashSet<>(Arrays.asList(schemes));
        URI uri = null;
        try {
            uri = new URI(decodedUrl);
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }

        String scheme = uri.getScheme();
        System.out.println("DECODED URL SCHEME" + scheme);
        if(!allowedScheme.contains(scheme)){
            this.m= null;
        }
        String host = uri.getHost();
        System.out.println("DECODED URL HOST" + host);
        if(URLParser.isValid(decodedUrl))
            malwareDatabaselookup(decodedUrl);
        else
            this.m = null;
    }
}

